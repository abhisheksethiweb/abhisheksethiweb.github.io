WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:04.070
In this video I'm going to show you how to do the MinMaxScaler example that we

00:00:04.070 --> 00:00:06.390
just did by hand but now in sklearn.

00:00:06.390 --> 00:00:08.960
So the MinMaxScaler, as always, is something that I

00:00:08.960 --> 00:00:12.700
first find out about by visiting the sklearn documentation using Google.

00:00:12.700 --> 00:00:15.620
So when I google for an example I get something like this.

00:00:15.620 --> 00:00:16.980
And I click on the first link.

00:00:16.980 --> 00:00:20.410
There's a number of different functions that Python has available to you for

00:00:20.410 --> 00:00:21.300
preprocessing data.

00:00:22.360 --> 00:00:24.720
We'll be looking at the MinMaxScaler today, and

00:00:24.720 --> 00:00:27.850
that falls under this paragraph of scaling features to a range.

00:00:27.850 --> 00:00:30.610
This is the documentation page that I had open when I came up

00:00:30.610 --> 00:00:32.960
with the example that I'm going to show you right now,

00:00:32.960 --> 00:00:35.780
so in order to make it maximally easy to follow, I

00:00:35.780 --> 00:00:39.780
would suggest that you sort of have this open in a parallel tab in your browser.

00:00:39.780 --> 00:00:42.330
But I'll also be explaining each step as I go through it,

00:00:42.330 --> 00:00:45.730
to show you how to use this in a practical example.

00:00:45.730 --> 00:00:48.620
I come over in my Terminal window and I fire up the Python interpreter.

00:00:48.620 --> 00:00:51.710
And the first thing that I am going to need to do is import the module.

00:00:51.710 --> 00:00:53.090
The next thing that I actually need to do,

00:00:53.090 --> 00:00:55.960
this is one of the things that was tricky for me the first time around.

00:00:55.960 --> 00:00:59.560
Is import numpy, because as you might have sort of noticed by now,

00:00:59.560 --> 00:01:03.120
a lot of the sklearn functions require numpy inputs.

00:01:03.120 --> 00:01:03.950
So let me show you what I mean.

00:01:03.950 --> 00:01:06.760
I'm going to be using weights data in this example, so

00:01:06.760 --> 00:01:09.200
I'm going to create a feature called weights, and

00:01:09.200 --> 00:01:12.340
as it happens I'm going to make this into a numpy array.

00:01:12.340 --> 00:01:15.240
I just got this from the example on the sklearn documentation page

00:01:15.240 --> 00:01:15.860
that I showed you.

00:01:15.860 --> 00:01:19.060
This is kind of me following the steps that they laid out.

00:01:19.060 --> 00:01:20.970
What I do now is I make my input data.

00:01:20.970 --> 00:01:22.790
So in this case, I'll be using the weights example.

00:01:22.790 --> 00:01:25.380
And something that's a little bit tricky that I had to

00:01:25.380 --> 00:01:29.680
play around with to figure out, is that what you actually want is a numpy array.

00:01:29.680 --> 00:01:33.600
Each element of the numpy array is going be a different training point, and

00:01:33.600 --> 00:01:36.790
then each element within that training point is going to be a feature.

00:01:36.790 --> 00:01:39.590
So in this case I'm really only interested in one feature, the weights feature,

00:01:39.590 --> 00:01:42.110
and then I have three different training points for my three different people.

00:01:42.110 --> 00:01:44.430
So when I put in my data, it looks like this.

00:01:44.430 --> 00:01:49.130
Now that I have my weights data input I'm ready to use the scaler on that.

00:01:49.130 --> 00:01:52.700
Here's the scaler that I imported from sklearn.preprocessing.

00:01:52.700 --> 00:01:55.130
And I want to have a new feature that's named rescaled,

00:01:55.130 --> 00:01:57.190
let's call it rescaled_weight.

00:01:57.190 --> 00:02:00.890
And to make rescaled_weight, what I do is call fit_transform on the weights.

00:02:00.890 --> 00:02:02.270
So this actually does two things.

00:02:02.270 --> 00:02:04.330
The first thing that it does is it fits.

00:02:04.330 --> 00:02:08.930
So it does things like find the x_min and the x_max, and then the transform

00:02:08.930 --> 00:02:14.500
actually applies the formula to all the elements in the, in the set of data.

00:02:14.500 --> 00:02:16.580
So this is doing two things at the same time.

00:02:16.580 --> 00:02:18.280
Sometimes you'll only want to do one or the other.

00:02:18.280 --> 00:02:21.670
Now, I've actually set myself up to make a mistake here.

00:02:21.670 --> 00:02:23.040
Let me show you what happens.

00:02:23.040 --> 00:02:25.470
All right. So we got an error here that says its going,

00:02:25.470 --> 00:02:29.570
it's assuming floating point values as, as input, but instead it got integers.

00:02:29.570 --> 00:02:32.400
And the reason why has to do with this line right here.

00:02:32.400 --> 00:02:35.310
All these inputs are integers, but it's expecting floating point numbers, and

00:02:35.310 --> 00:02:37.490
if you were looking at the documentation, the example,

00:02:37.490 --> 00:02:40.200
very closely as I was doing this, you might have

00:02:40.200 --> 00:02:43.530
figured out that this was going to be a problem down the road for us.

00:02:43.530 --> 00:02:46.490
So, I am going to turn these into floating point numbers by putting

00:02:46.490 --> 00:02:49.680
a decimal point after each one of them and we'll try this again.

00:02:49.680 --> 00:02:50.690
Great. That looks much better.

00:02:50.690 --> 00:02:52.290
Let me print it out now.

00:02:52.290 --> 00:02:54.280
And there is our new transformed feature.

00:02:54.280 --> 00:02:57.710
So, there is the 0.417 that we calculated in the last example.

00:02:57.710 --> 00:03:02.060
You can also see that the smallest value in a list has a rescale value of zero,

00:03:02.060 --> 00:03:05.100
and the largest one has a rescale value of one.

00:03:05.100 --> 00:03:07.105
Which, if you look at the equation carefully,

00:03:07.105 --> 00:03:09.950
will immediately become apparent that that's always going to be true.

00:03:09.950 --> 00:03:14.030
So this is an example of how you can use the MinMaxScaler in sklearn to

00:03:14.030 --> 00:03:17.680
do in just a couple lines what we did by hand in the last example.

