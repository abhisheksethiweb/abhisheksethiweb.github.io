WEBVTT
Kind: captions
Language: zh-CN

00:00:00.570 --> 00:00:03.759
如果你看看这条蓝色的线 似乎它是失败的

00:00:03.759 --> 00:00:05.620
它太靠近这两个点了

00:00:06.719 --> 00:00:10.650
如果我们想要最小化误差 它会误分一个点到多个点

00:00:11.720 --> 00:00:14.670
然而这条黄色的线似乎是一个更好的划分

00:00:14.669 --> 00:00:16.068
考虑到它能够来自于所有的点进行划分

00:00:17.179 --> 00:00:19.739
所以 似乎最好的线是这条黄色的

00:00:20.839 --> 00:00:23.190
因此 如果你选这条黄色的线 我们都是赞同的

00:00:24.589 --> 00:00:28.000
现在的问题是 我们如何能够找到这条黄色的线？

00:00:29.250 --> 00:00:30.730
在找这条黄色的线之前

00:00:30.730 --> 00:00:34.308
让我们事实上来找一个度量方式 它可以告诉我们黄色的线更好

00:00:35.399 --> 00:00:38.864
那么 第一个观察的事情就是这些远离边界的点

00:00:38.865 --> 00:00:41.320
它们对于我们的决定并不重要

00:00:41.320 --> 00:00:42.789
所以让我们忘掉这些点

00:00:42.789 --> 00:00:44.799
只考虑那些里边界近的点

00:00:46.009 --> 00:00:49.699
事实上 我们真正要关注的是点到两条

00:00:49.700 --> 00:00:50.760
直线的距离

00:00:51.869 --> 00:00:54.899
什么让我们知道了黄色的线更好呢？

00:00:54.899 --> 00:00:58.969
这条黄色的线更好是因为不管怎么样 它都比蓝色的线

00:00:58.969 --> 00:00:59.799
离这些点更远

00:01:00.929 --> 00:01:03.859
那么 我们能够仅仅观察这四个点的距离 注意到这个距离中

00:01:03.859 --> 00:01:08.209
最小的距离就是我们度量点离直线到底有多近

00:01:09.219 --> 00:01:12.039
这意味着我们必须要考虑的就是

00:01:12.040 --> 00:01:13.870
这四个距离的最小值

00:01:13.870 --> 00:01:17.250
那是我们度量线离点到底有多近的方式

00:01:18.439 --> 00:01:21.039
我们称这个度量为距离

00:01:21.040 --> 00:01:23.790
所以我们得出结论 黄色的线更好

00:01:23.790 --> 00:01:26.700
因为在黄线中 这些距离中最小的距离

00:01:26.700 --> 00:01:29.170
比蓝线中最小的距离大

00:01:30.459 --> 00:01:34.169
这就是我们需要处理的函数 这四个距离中的最小值

00:01:34.170 --> 00:01:37.450
我们的目标是使得这个最小值尽可能的大

00:01:37.450 --> 00:01:40.500
换句话说 我们需要最大化这个距离

00:01:41.709 --> 00:01:43.979
我们能够怎么最大化这个距离呢？

00:01:43.980 --> 00:01:45.640
你猜对了 使用梯度下降

00:01:45.640 --> 00:01:49.379
这里也有着其他的方法能够使用 我们之后的课上会学到

00:01:50.620 --> 00:01:53.040
这个方法叫做支持向量机

00:01:53.040 --> 00:01:56.310
这个词 支持 是因为靠近边界的点被称为支撑

00:01:56.310 --> 00:01:57.060
这个事实

