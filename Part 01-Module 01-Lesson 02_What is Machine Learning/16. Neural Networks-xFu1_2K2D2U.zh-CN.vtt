WEBVTT
Kind: captions
Language: zh-CN

00:00:00.270 --> 00:00:02.620
好的 现在让我们更加仔细的来观察这个模型

00:00:02.620 --> 00:00:04.730
这个模型接受或者拒绝学生

00:00:04.730 --> 00:00:07.759
比如说有一个学生四 他在这次测试中得到了9分

00:00:07.759 --> 00:00:08.789
但是他的成绩是一

00:00:09.869 --> 00:00:12.009
根据我们的模型 这个学生应该被接受

00:00:12.009 --> 00:00:15.410
因为他在这条线的最上面

00:00:15.410 --> 00:00:16.320
但是这似乎不对

00:00:16.320 --> 00:00:18.740
因为这个学生有一个非常低的成绩 这不应该被接受

00:00:19.870 --> 00:00:23.560
所以也许仅仅想要用一条线来区分这里的数据

00:00:23.559 --> 00:00:24.529
太简单了 对吗？

00:00:25.570 --> 00:00:29.000
也许真实的数据应该那些得到

00:00:29.000 --> 00:00:32.630
低的测试分或者是低的成绩的都不应该被接受

00:00:33.649 --> 00:00:35.609
所以似乎这条线已经不能分离这些点了

00:00:36.659 --> 00:00:38.089
用一条线之后的下一个能做的是什么呢？

00:00:39.100 --> 00:00:40.609
也许是一个圆？

00:00:40.609 --> 00:00:41.909
一个圆可能会有效果

00:00:41.909 --> 00:00:43.329
也许两条线？

00:00:43.329 --> 00:00:44.769
那也许也能有效

00:00:44.770 --> 00:00:45.640
让我们来处理这个

00:00:45.640 --> 00:00:47.810
让我们试一下两条线

00:00:47.810 --> 00:00:50.710
我们能够怎么找到这两条线呢 再一次我们可以做这个

00:00:50.710 --> 00:00:53.890
通过梯度下降来最小化一个和之前相似的对数损失函数

00:00:55.070 --> 00:00:57.710
这被称为神经网络

00:00:57.710 --> 00:01:00.859
现在这个问题是为什么这被称为神经网络

00:01:00.859 --> 00:01:03.390
比如说我们在一台非常慢的电脑上面工作

00:01:03.390 --> 00:01:04.829
一段时间仅仅能够处理一件事

00:01:05.840 --> 00:01:07.590
所以非常不容易来问

00:01:07.590 --> 00:01:11.490
这个区域的点被两条线区分开了吗？

00:01:11.489 --> 00:01:13.709
我们必须要把这个分成两个单独的问题

00:01:15.280 --> 00:01:19.079
第一个问题是 这个点在这条蓝线之上吗？

00:01:19.079 --> 00:01:23.620
让我们基于这个图上的4个黑点来回答这个问题

00:01:23.620 --> 00:01:25.719
对于这四个点 我们能够看出

00:01:25.719 --> 00:01:30.530
这个答案是对的 对的 错的 错的

00:01:30.530 --> 00:01:34.640
第二个问题是 这个点在这条橘色的线上面吗

00:01:34.640 --> 00:01:41.420
对于这4个点 我们能够看出这个答案是 不对 对 不对 对

00:01:41.420 --> 00:01:44.870
现在 第三个问题就是把前两个的答案取出来

00:01:44.870 --> 00:01:46.040
组合他们

00:01:46.040 --> 00:01:51.700
那么第三个问题 第一个问题和第二个问题的答案都是对吗？

00:01:52.829 --> 00:01:56.609
对于这四个点 我们能够看出

00:01:56.609 --> 00:02:00.299
答案是不对 对 不对 对

00:02:00.299 --> 00:02:04.189
所以除了这个在绿色区域的这个点 他们都是不对

00:02:05.629 --> 00:02:08.448
现在让我们取出每个问题作为一个小的节点

00:02:08.449 --> 00:02:12.030
第一个问题是 这个点在蓝色的线之上吗？

00:02:12.030 --> 00:02:15.699
这个区域我们有一个节点和两个输入节点

00:02:15.699 --> 00:02:18.819
测试得分和成绩

00:02:18.819 --> 00:02:21.889
例如我们有一个学生 测试成绩是1

00:02:21.889 --> 00:02:23.129
成绩是8

00:02:24.539 --> 00:02:29.449
这个节点画出这个点 检查这个点是不是在这条黑线上面

00:02:29.449 --> 00:02:31.829
返回这个答案 对或是错

00:02:33.129 --> 00:02:38.079
第二个问题是相似的 我们输入一个测试分数和成绩进入相应的节点

00:02:38.080 --> 00:02:40.469
我们将会画出这个点 返回正确还是错误

00:02:40.469 --> 00:02:44.500
依赖于这个点在橙色线的上面还是没有

00:02:46.210 --> 00:02:47.250
现在 第三个问题

00:02:47.250 --> 00:02:50.409
问题1和问题2的答案都是对吗？

00:02:50.409 --> 00:02:54.719
我们将会把前面两个问题的答案作为输入

00:02:54.719 --> 00:02:58.530
如果这两个答案都对的 就返回对的 否则就返回错

00:02:59.539 --> 00:03:01.549
这个在逻辑运算中称为"和"运算符

00:03:02.770 --> 00:03:04.219
现在 这就是魔法发生的地方

00:03:04.219 --> 00:03:08.000
如果我们把这三个问题合在这个节点中 我们就得到了一个神经网络

00:03:09.500 --> 00:03:11.930
如果我们简化一下 就得到了下面的东西

00:03:11.930 --> 00:03:15.390
第一列使我们输入测试和成绩的地方

00:03:15.389 --> 00:03:18.489
第二列是我们检查这些和测试成绩有关的

00:03:18.490 --> 00:03:22.510
坐标点是否在每条线的上面

00:03:23.629 --> 00:03:27.379
第三层我们看看前面的层的答案

00:03:27.379 --> 00:03:29.289
用"和"运算符把他们合在一起

00:03:30.819 --> 00:03:33.489
那么这就是我们的神经网络的样子

00:03:33.490 --> 00:03:36.120
现在你也许在想这些事有点让人怀疑

00:03:37.270 --> 00:03:39.560
前面两个输出的错看起来就像他们取值

00:03:39.560 --> 00:03:43.650
然后检查相关的点在特定的直线上还是下

00:03:43.650 --> 00:03:47.830
因此第三层仅仅是输入对或者错 然后返回对和错

00:03:49.159 --> 00:03:52.530
有可能把第三层的节点看作是前面两层节点中的一个吗？

00:03:53.710 --> 00:03:54.900
答案是可以

00:03:54.900 --> 00:03:57.960
那么 让我们来更进一步看看"和"运算符

00:03:57.960 --> 00:04:02.030
我们实际做一个表格 表格上有输入和输出

00:04:02.030 --> 00:04:06.217
那么使用"和"运算符 如果我们用对和对作为输入 我们得到一个对

00:04:06.217 --> 00:04:10.175
如果我们输入对和不对 我们得到一个不对

00:04:10.175 --> 00:04:13.679
如果我们输入一个不对和对 我们得到一个不对

00:04:13.680 --> 00:04:17.050
最后如果我们输入一个不对和不对 我们得到不对

00:04:18.290 --> 00:04:21.319
现在 我们能够想像对作为1 不对作为0

00:04:21.319 --> 00:04:24.089
在这种情况下 我们的表格变成了另外一个

00:04:25.100 --> 00:04:29.357
现在 我们输入0和1进入这个运算符 检查一下

00:04:29.357 --> 00:04:33.499
相对应的点的坐标在线的上方还是下方

00:04:34.689 --> 00:04:37.949
如果我们看看这个点(1,1) 我们会得到

00:04:37.949 --> 00:04:42.029
点在绿色的线上面或者是在正的区域 所以我们得到1

00:04:43.060 --> 00:04:44.680
现在如果我们看看(1,0)这个点

00:04:44.680 --> 00:04:49.360
我们会发现它在红色的线下面或者是说在负的区域

00:04:49.360 --> 00:04:51.040
所以我们得到0

00:04:51.040 --> 00:04:54.470
对于(0, 1)坐标的点是相似的

00:04:54.470 --> 00:04:57.730
这个点在直线下方 我们得到0

00:04:57.730 --> 00:05:02.850
最后(0, 0)坐标的点也在这条直线下面

00:05:02.850 --> 00:05:05.040
所以答案再一次是0

00:05:05.040 --> 00:05:07.319
那么这就是我们的最终的神经网络的样子

00:05:08.439 --> 00:05:12.009
左边 我们叫做输入层

00:05:12.009 --> 00:05:16.060
我们输入测试分数和成绩

00:05:16.060 --> 00:05:20.189
这里我们有一个情况 测试分数是1 成绩是8

00:05:20.189 --> 00:05:22.279
然后这通过了中间层

00:05:22.279 --> 00:05:25.449
这被称为隐藏层 会帮助我们计算

00:05:26.459 --> 00:05:29.859
所以在这里我们能够看到1和8一起变成了一个点

00:05:29.860 --> 00:05:32.980
有着坐标1和8 在下一层的两幅图中

00:05:34.180 --> 00:05:38.639
在上面的节点 (1,8) 在绿色或者是说在正的区域

00:05:38.639 --> 00:05:40.028
所以这个点输出一个对

00:05:41.720 --> 00:05:45.550
在下面的点中(1,8)在红色或者是在负的区域

00:05:45.550 --> 00:05:47.069
所以底下的节点输出一个错

00:05:48.310 --> 00:05:51.850
现在我们记得对可以被1表示

00:05:51.850 --> 00:05:53.885
不对可以被0表示

00:05:55.110 --> 00:05:57.379
现在下一层被称为输出层

00:05:57.379 --> 00:06:01.800
取值来自于中间层 主要是1和0

00:06:01.800 --> 00:06:05.638
它定位在了坐标是(1, 0)这个点

00:06:05.637 --> 00:06:10.489
这个点是在最后节点的红色或者是说负的区域

00:06:10.490 --> 00:06:13.329
所以输出是一个错

00:06:13.329 --> 00:06:16.567
神经网络已经收到了这个输入

00:06:16.567 --> 00:06:21.399
值为1的测试分数和值为8的成绩 它输出了一个错

00:06:23.399 --> 00:06:27.179
这是一个简单的神经网络 但是你能够看出如何增加更多的节点在

00:06:27.180 --> 00:06:31.030
中间甚至是更多的节点层可以帮助我们在平面上映射更加复杂

00:06:31.029 --> 00:06:34.639
的区域甚至在三维空间或者是更高维的空间

00:06:35.709 --> 00:06:39.379
神经网络是非常强的机器学习算法

00:06:39.379 --> 00:06:42.509
其被使用在大多数人工项目中比如面部识别

00:06:42.509 --> 00:06:45.879
语音识别 下棋和自动驾驶

00:06:47.069 --> 00:06:49.779
我们称它为神经网络是因为这些节点像

00:06:49.779 --> 00:06:50.759
大脑里面的神经元

00:06:51.790 --> 00:06:55.379
神经元将会把输入和其他神经元的输出以一种

00:06:55.379 --> 00:07:00.159
神经脉冲的形势 决定是否激活这个神经脉冲

00:07:00.160 --> 00:07:04.000
在我们的情况中 神经元把输入和其他神经元的输出以

00:07:04.000 --> 00:07:04.740
数字的形势

00:07:04.740 --> 00:07:07.314
决定返回一个0或者是一个1

