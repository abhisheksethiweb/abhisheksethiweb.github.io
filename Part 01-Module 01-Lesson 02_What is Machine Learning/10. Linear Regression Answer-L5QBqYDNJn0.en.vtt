WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:04.400
Well, to help us out, we can see that these points can form a line.

00:00:05.400 --> 00:00:08.009
And we can draw the line that best fits these data.

00:00:09.089 --> 00:00:13.782
Now on this line, we can see that our best guess for the price of the house is

00:00:13.782 --> 00:00:18.498
this point here over the line, which corresponds to $120,000.

00:00:18.498 --> 00:00:22.464
So if you said $120,000, that is correct.

00:00:22.464 --> 00:00:24.469
This method is known as Linear Regression.

00:00:25.839 --> 00:00:29.949
You can think of linear regression as a painter, who will look at your data and

00:00:29.949 --> 00:00:32.298
draw the best fitting line through it.

00:00:32.298 --> 00:00:34.750
Now you may be asking, how do we find this line?

00:00:35.929 --> 00:00:37.450
So let's try a small example.

00:00:37.450 --> 00:00:41.680
Let's try to fit the best line that fits through these three points over here.

00:00:42.929 --> 00:00:46.899
Obviously best line is subjective, but we'll find some line that works well.

00:00:48.210 --> 00:00:51.710
Since we're pretending to be a computer, we can't really eyeball the line.

00:00:51.710 --> 00:00:54.469
So we're going to start by drawing a random line and

00:00:54.469 --> 00:00:56.030
seeing how bad this line is.

00:00:57.920 --> 00:01:01.160
In order to see how bad this line is, we calculate the error.

00:01:02.200 --> 00:01:04.159
So we're going to look at the length of the distances 

00:01:04.159 --> 00:01:07.539
from the line to the three points.

00:01:07.540 --> 00:01:09.800
And we're going to say that the error of this line 

00:01:09.800 --> 00:01:11.569
is the sum of those three lengths.

00:01:13.079 --> 00:01:16.209
Now what we're going to do is to move this line around and

00:01:16.209 --> 00:01:17.948
see if we can reduce the error.

00:01:21.114 --> 00:01:23.109
So, let's say we move in this direction.

00:01:24.719 --> 00:01:26.829
And we calculate the error again.

00:01:26.829 --> 00:01:30.179
It's given by these yellow distances.

00:01:30.180 --> 00:01:34.318
We add them up and realize that we've just increase the error, so

00:01:34.317 --> 00:01:35.530
that's not good.

00:01:36.700 --> 00:01:39.475
Let's try moving in the other direction then.

00:01:41.438 --> 00:01:44.059
We move it and again calculate the error.

00:01:44.060 --> 00:01:46.250
It's given by the sum of the green distances.

00:01:47.379 --> 00:01:50.239
And we see that the errors smaller, so we say, let's take that step.

00:01:51.799 --> 00:01:54.427
If we continue doing this procedure several times,

00:01:54.427 --> 00:01:56.638
we'll always be decreasing the error, and

00:01:56.638 --> 00:02:00.000
we'll finally arrived to a good solution in the form of this line.

00:02:01.129 --> 00:02:05.250
This general procedure to minimize the error, is known as Gradient Descent.

00:02:06.750 --> 00:02:09.659
In real life, since we don't want to deal with negative distance.

00:02:09.659 --> 00:02:13.930
What we do, is instead of finding the distances from the line to the points,

00:02:13.930 --> 00:02:16.030
we actually have their squares.

00:02:16.030 --> 00:02:18.030
This procedure is called Least Squares.

00:02:20.349 --> 00:02:23.189
So we're back here on the summit of Mount Errorest, and

00:02:23.189 --> 00:02:25.430
we're trying to descent to the bottom.

00:02:25.430 --> 00:02:29.840
Now in this context, the higher we are, the larger our error is.

00:02:29.840 --> 00:02:31.890
So descending means reducing the error.

00:02:33.460 --> 00:02:34.480
Now what do we do?

00:02:34.479 --> 00:02:36.289
Well, we look at our surroundings and

00:02:36.289 --> 00:02:38.739
try to figure out which way we can descend more.

00:02:40.569 --> 00:02:43.275
That's the equivalent of jiggling the line around and looking for

00:02:43.275 --> 00:02:46.055
the movement that reduces the error the most.

00:02:46.055 --> 00:02:47.444
So for example here,

00:02:47.444 --> 00:02:50.264
this seems to be the direction that makes it descend the most.

00:02:51.365 --> 00:02:52.795
So we take a step in that direction.

00:02:54.025 --> 00:02:57.280
That is the equivalent of moving the line one step in the direction that

00:02:57.280 --> 00:02:58.850
decreases the error the most.

00:02:59.960 --> 00:03:03.650
In a way, we're moving the line closer to the three points.

00:03:03.650 --> 00:03:07.830
So now we've reduced our error and got closer to the bottom of the mountain,

00:03:07.830 --> 00:03:09.660
then we can start the procedure again.

00:03:09.659 --> 00:03:13.370
Looking at our surroundings and deciding in what direction we descend the most.

00:03:13.370 --> 00:03:17.159
Or equivalently, in what direction we get closer to the points.

00:03:17.159 --> 00:03:21.024
Then we start the procedure again and again, looking at our surroundings and

00:03:21.024 --> 00:03:24.414
deciding in what direction we descend the most, or equivalently,

00:03:24.414 --> 00:03:27.000
in what direction we get closer to the points.

00:03:27.000 --> 00:03:31.780
What we just did, was reducing the error until we find its minimum value,

00:03:31.780 --> 00:03:33.490
which gives us the best line fit.

