WEBVTT
Kind: captions
Language: zh-CN

00:00:00.250 --> 00:00:04.400
我们可以看到这些数据点差不多可以排成一条直线

00:00:05.400 --> 00:00:08.009
我们可以画出一条对这些数据拟合得最好的直线

00:00:09.089 --> 00:00:13.782
在这条直线上 我们可以看到这栋房子

00:00:13.782 --> 00:00:18.498
对应的点在这里 售价为 $120,000

00:00:18.498 --> 00:00:22.464
如果你的回答是 $120,000 那么这就是正确答案

00:00:22.464 --> 00:00:24.469
这个方法叫做线性回归 (Linear Regression)

00:00:25.839 --> 00:00:29.949
你可以把线性回归当作一个画家

00:00:29.949 --> 00:00:32.298
他查阅所有数据 并画出穿过数据点的最佳拟合直线

00:00:32.298 --> 00:00:34.750
你或许会问 如何找出这条最佳拟合线？

00:00:35.929 --> 00:00:37.450
来看一个例子

00:00:37.450 --> 00:00:41.680
我们尝试找出这三个点的最佳拟合直线

00:00:42.929 --> 00:00:46.899
显然 所谓的最佳拟合线是很主观的 我们可以找出比较好的那根直线

00:00:48.210 --> 00:00:51.710
现在我们把自己当作是计算机 计算机可不能仅用视觉来判断

00:00:51.710 --> 00:00:54.469
我们随便画一条直线作为初始情形

00:00:54.469 --> 00:00:56.030
来看看它到底有多糟糕

00:00:57.920 --> 00:01:01.160
为此我们需要计算误差 来显示这条线的糟糕程度

00:01:02.200 --> 00:01:06.159
我们将计算这三个点

00:01:06.159 --> 00:01:07.539
与这条直线之间的距离

00:01:07.540 --> 00:01:10.800
我们把这三个距离之和

00:01:10.799 --> 00:01:11.569
称为这条直线的拟合误差

00:01:13.079 --> 00:01:16.209
现在 我们移动这条线

00:01:16.209 --> 00:01:17.948
看这是否能够减小误差

00:01:21.114 --> 00:01:23.109
我们朝这个方向移动直线

00:01:24.719 --> 00:01:26.829
再次计算误差

00:01:26.829 --> 00:01:30.179
可以通过这些黄色的线段来表示这些距离

00:01:30.180 --> 00:01:34.318
求和后我们发现误差反而增加了

00:01:34.317 --> 00:01:35.530
所以这并不是一个合适的方向

00:01:36.700 --> 00:01:39.475
我们往另一个方向移动直线

00:01:41.438 --> 00:01:44.059
移动后重新计算误差

00:01:44.060 --> 00:01:46.250
可以借助这些绿色的线段得到距离之和

00:01:47.379 --> 00:01:50.239
我们发现误差变小了 所以就继续朝这个方向移动直线

00:01:51.799 --> 00:01:54.427
如果重复这些步骤若干次

00:01:54.427 --> 00:01:56.638
我们总能够继续减小误差

00:01:56.638 --> 00:02:00.000
最终将得到一条具有最小误差的拟合直线

00:02:01.129 --> 00:02:05.250
这种最小化误差的通用方法叫做梯度下降 (Gradient Descent)

00:02:06.750 --> 00:02:09.659
由于值为负的距离并不具有实际意义

00:02:09.659 --> 00:02:13.930
我们会使用数据点到直线距离的平方

00:02:13.930 --> 00:02:16.030
而不是使用距离本身

00:02:16.030 --> 00:02:18.030
这一步骤称为最小二乘法 (Least Squares)

00:02:20.349 --> 00:02:23.189
我们到了误差之巅（译者注：英语谐音珠穆朗玛峰）

00:02:23.189 --> 00:02:25.430
想要下降到山底

00:02:25.430 --> 00:02:29.840
在这个场景中 我们所处的海拔越高 代表误差越大

00:02:29.840 --> 00:02:31.890
高度下降就意味着误差缩小

00:02:33.460 --> 00:02:34.480
我们该怎么做？

00:02:34.479 --> 00:02:36.289
我们查看四周

00:02:36.289 --> 00:02:38.739
寻找一个能下降更多的方向

00:02:40.569 --> 00:02:43.275
这等同于通过四处移动拟合直线来

00:02:43.275 --> 00:02:46.055
最大程度减小误差

00:02:46.055 --> 00:02:47.444
举例来说

00:02:47.444 --> 00:02:50.264
这个方向似乎就是高度下降最大的方向

00:02:51.365 --> 00:02:52.795
我们朝着这个方向前进一步

00:02:54.025 --> 00:02:57.280
这等价于沿着能够最大程度减小误差的方向

00:02:57.280 --> 00:02:58.850
移动拟合直线

00:02:59.960 --> 00:03:03.650
也就是说 直线的移动让它更加接近这三个点

00:03:03.650 --> 00:03:07.830
现在我们减小了误差 也就是更加靠近了山底

00:03:07.830 --> 00:03:09.660
然后我们重复以上的过程

00:03:09.659 --> 00:03:13.370
查看四周并判断能最大程度下降的方向

00:03:13.370 --> 00:03:17.159
或者说 哪个方向能使直线与数据点更加接近

00:03:17.159 --> 00:03:21.024
然后我们不断地重复此过程

00:03:21.024 --> 00:03:24.414
寻找高度下降最大的方向

00:03:24.414 --> 00:03:27.000
也就是使直线更接近数据点的方向

00:03:27.000 --> 00:03:31.780
我们所做的就是 不断减小误差直至其最小值

00:03:31.780 --> 00:03:33.490
这样也就得到了最佳拟合直线

