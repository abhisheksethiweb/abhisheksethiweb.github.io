WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.875
我们先来看看离散空间和连续空间的含义

00:00:04.875 --> 00:00:09.449
回忆下马尔可夫决策流程的定义

00:00:09.449 --> 00:00:14.429
我们假设任何时间的环境状态来自于一组潜在状态

00:00:14.429 --> 00:00:16.109
当该组合是有限组合时

00:00:16.109 --> 00:00:18.359
我们可以将其称之为离散状态空间

00:00:18.359 --> 00:00:21.929
动作也类似 如果有一组有限的动作

00:00:21.929 --> 00:00:25.649
则表示环境有一个离散动作空间

00:00:25.649 --> 00:00:29.204
离散空间简化了问题

00:00:29.204 --> 00:00:32.429
首先 使我们能够将任何状态和动作函数

00:00:32.429 --> 00:00:35.939
表示为字典或查询表

00:00:35.939 --> 00:00:38.879
假设有一个状态值函数 V

00:00:38.880 --> 00:00:41.835
它是从一组状态到实数的映射

00:00:41.835 --> 00:00:44.145
如果将状态表示为整数

00:00:44.145 --> 00:00:48.915
则可以将值函数表示为字典 并将每个状态当做键

00:00:48.914 --> 00:00:52.274
类似地 假设有一个动作值函数 Q

00:00:52.274 --> 00:00:55.859
它将每个状态动作对映射到一个实数

00:00:55.859 --> 00:01:01.469
同样 你可以使用字典或将值函数存储为表格或矩阵

00:01:01.469 --> 00:01:03.839
每行对应一个状态

00:01:03.840 --> 00:01:06.180
每列对应一个动作

00:01:06.180 --> 00:01:11.665
离散空间对很多强化学习算法来说也很关键

00:01:11.665 --> 00:01:13.835
例如 在值迭代中

00:01:13.834 --> 00:01:18.424
这个内部 for 循环逐个遍历每个状态

00:01:18.424 --> 00:01:21.259
并更新相应的估值 V(s)

00:01:21.260 --> 00:01:25.564
如果状态空间是连续的 则不可能这么操作

00:01:25.564 --> 00:01:28.549
循环将永远持续下去

00:01:28.549 --> 00:01:33.575
甚至对于有很多状态的离散状态空间来说 这一流程也很快变得不可行

00:01:33.575 --> 00:01:37.954
Q 学习等不基于模型的方法也需要离散空间

00:01:37.954 --> 00:01:42.049
这里 我们对状态 S′ 的所有潜在动作执行 max 运算

00:01:42.049 --> 00:01:46.390
如果有一组有限的动作 则很轻松

00:01:46.390 --> 00:01:48.780
但是如果动作空间是连续的

00:01:48.780 --> 00:01:53.700
这个小小的计算步骤本身就会变成完全失败的优化问题

00:01:53.700 --> 00:01:57.990
那么连续空间到底是什么意思？

00:01:57.989 --> 00:02:01.394
连续是离散的反义词

00:02:01.394 --> 00:02:07.274
连续空间并不限定于一组独特的值 例如整数

00:02:07.275 --> 00:02:11.610
相反 它可以是一定范围的值 通常是实数

00:02:11.610 --> 00:02:15.960
这意味着状态值等量值

00:02:15.960 --> 00:02:17.219
例如表示离散情况的

00:02:17.219 --> 00:02:18.555
条形图

00:02:18.555 --> 00:02:20.325
每个状态对应一个长条

00:02:20.324 --> 00:02:24.959
现在需要转换成预期范围内的密度图

00:02:24.960 --> 00:02:28.650
同一记法也扩展到了环境中

00:02:28.650 --> 00:02:32.760
状态不再是单个实数 而是一个此类数字的向量

00:02:32.759 --> 00:02:38.054
这样依然称之为连续空间 只是不再是一个维度

00:02:38.055 --> 00:02:40.770
在继续深入讲解之前

00:02:40.770 --> 00:02:45.284
我们尝试了解下为何连续状态空间很重要

00:02:45.284 --> 00:02:47.302
它们来自何处？

00:02:47.302 --> 00:02:51.764
思考一个高级决策制定任务 例如下棋

00:02:51.764 --> 00:02:55.424
经常可以将一组潜在状态看做离散状态

00:02:55.425 --> 00:02:58.775
每个棋子都在棋盘上的哪个方框内

00:02:58.775 --> 00:03:01.870
你不需要精确地确定

00:03:01.870 --> 00:03:05.890
每个棋子处在方框内的哪个位置或朝着哪个方向

00:03:05.889 --> 00:03:09.639
虽然你也可以了解这些细节信息

00:03:09.639 --> 00:03:12.474
并思考 为何你的骑士在瞪着我的王后

00:03:12.474 --> 00:03:15.564
但是这些信息与要解决的问题不相关

00:03:15.564 --> 00:03:19.180
你可以从游戏模型中删除这些信息

00:03:19.180 --> 00:03:24.069
通常 网格环境在强化学习中非常热门

00:03:24.069 --> 00:03:28.644
它们使你能够直观地查看智能体在空间环境中的行为如何

00:03:28.645 --> 00:03:33.715
但是现实的物理空间并不能始终清晰地划分为网格

00:03:33.715 --> 00:03:38.335
扫地机器人无法前往单元格 (3,5)

00:03:38.335 --> 00:03:42.430
它必须从当期位置绘制一条到这个点的路线

00:03:42.430 --> 00:03:46.944
即距离西侧墙壁 2.5 米并且距离北侧墙壁 1.8 米

00:03:46.944 --> 00:03:49.780
它还需要跟踪朝向

00:03:49.780 --> 00:03:53.020
并且平滑地转向要前往的方向

00:03:53.020 --> 00:03:56.080
这些都是智能体可能需要处理

00:03:56.080 --> 00:03:59.425
并表示为状态的一部分的实数

00:03:59.425 --> 00:04:02.140
动作也可以是连续的动作

00:04:02.139 --> 00:04:05.064
例如玩飞镖的机器人

00:04:05.064 --> 00:04:08.770
它必须设置扔飞镖的高度和角度

00:04:08.770 --> 00:04:12.850
选择相应级别的扔力

00:04:12.849 --> 00:04:15.969
即使这些值出现小小的变化

00:04:15.969 --> 00:04:20.319
也会对飞镖最终落在板上的位置有很大的影响

00:04:20.319 --> 00:04:23.529
通常 需要在物理环境中

00:04:23.529 --> 00:04:26.904
采取的大多数动作本质上都是连续动作

00:04:26.904 --> 00:04:30.159
很明显 我们需要修改表示法或算法

00:04:30.160 --> 00:04:34.270
或者同时修改二者以便处理连续空间

00:04:34.269 --> 00:04:37.149
我们将讨论的两个主要策略是

00:04:37.149 --> 00:04:40.829
离散化和函数逼近

