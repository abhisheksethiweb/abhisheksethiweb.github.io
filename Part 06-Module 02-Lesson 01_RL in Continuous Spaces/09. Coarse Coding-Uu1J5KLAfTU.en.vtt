WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
Coarse coding is just like Tile coding,

00:00:02.850 --> 00:00:07.650
but uses a sparser set of features to encode the state space.

00:00:07.650 --> 00:00:11.952
Imagine dropping a bunch of circles on your 2D continuous state space.

00:00:11.952 --> 00:00:15.359
Take any state S which is a position in this space,

00:00:15.359 --> 00:00:18.210
and mark all the circles that it belongs to.

00:00:18.210 --> 00:00:22.890
Prepare a bit vector with a one for those circles and 0 for the rest.

00:00:22.890 --> 00:00:26.039
And that's your sparse coding representation of the state.

00:00:26.039 --> 00:00:30.765
Looking at a 2D space helps us visualize the basic idea.

00:00:30.765 --> 00:00:36.969
But it also extends to higher dimensions where circles become spheres and hyper spheres.

00:00:36.969 --> 00:00:39.674
There are some neat properties of coarse coding.

00:00:39.674 --> 00:00:44.589
Using smaller circles results in less generalization across the space.

00:00:44.590 --> 00:00:47.370
The learning algorithm has to work a bit longer,

00:00:47.369 --> 00:00:50.655
but you have greater effective resolution.

00:00:50.655 --> 00:00:54.009
Larger circles lead to more generalization,

00:00:54.009 --> 00:00:56.710
and in general a smoother value function.

00:00:56.710 --> 00:01:00.024
You can use fewer large circles to cover the space,

00:01:00.024 --> 00:01:02.670
thus reducing your representation,

00:01:02.670 --> 00:01:04.719
but you would lose some resolution.

00:01:04.719 --> 00:01:08.560
It's not just the size of these circles that we can vary.

00:01:08.560 --> 00:01:12.070
We can change them in other ways like making them taller or

00:01:12.069 --> 00:01:16.384
wider to get more resolution along one dimension versus the other.

00:01:16.385 --> 00:01:20.469
In fact, this same technique generalizes to pretty much any shape.

00:01:20.469 --> 00:01:23.875
In coarse coding, just like in tile coding,

00:01:23.875 --> 00:01:27.665
are resulting state representation is a binary vector.

00:01:27.665 --> 00:01:30.359
Think of each tile or circle as a feature.

00:01:30.359 --> 00:01:31.750
One, if it is an active,

00:01:31.750 --> 00:01:32.950
zero if it is not.

00:01:32.950 --> 00:01:37.329
A natural extension to this idea is to use the distance

00:01:37.329 --> 00:01:42.469
from the center of each circle as a measure of how active that feature is.

00:01:42.469 --> 00:01:46.525
This measure or response can be made to fall off smoothly

00:01:46.525 --> 00:01:50.770
using a Gaussian or a bell-shaped curve centered on the circle,

00:01:50.769 --> 00:01:53.750
which is known as a radial basis function.

00:01:53.750 --> 00:01:57.069
Of course, the resulting feature values will no longer be

00:01:57.069 --> 00:02:01.039
discrete so we'll end up with yet another continuous state vector.

00:02:01.040 --> 00:02:06.375
But what is cool is that the number of features can be drastically reduced this way.

00:02:06.375 --> 00:02:12.000
We'll look at RBFs more closely later when we discuss function approximations.

