WEBVTT
Kind: captions
Language: pt-BR

00:00:00.261 --> 00:00:02.700
Se você já conhece
o espaço do estado,

00:00:02.734 --> 00:00:06.189
pode desenhar manualmente um esquema
de discretização apropriado.

00:00:06.429 --> 00:00:08.277
Como no exemplo da troca
de marchas,

00:00:08.311 --> 00:00:11.671
nós conhecíamos a relação entre
consumo de combustível e velocidade.

00:00:11.705 --> 00:00:14.670
Mas para funcionar
em ambientes arbitrários,

00:00:14.704 --> 00:00:16.758
precisamos
de um método mais genérico.

00:00:16.792 --> 00:00:19.910
Uma abordagem elegante
para isso é o Tile Coding.

00:00:20.292 --> 00:00:24.686
Aqui, o espaço do estado subjacente
é contínuo e bidimensional.

00:00:24.720 --> 00:00:27.502
Nós sobrepomos
múltiplas grades, ou tilings

00:00:27.536 --> 00:00:31.502
em cima do espaço,
uma um pouco deslocada da outra.

00:00:31.536 --> 00:00:34.535
Qualquer posição "S"
no espaço do estado

00:00:34.568 --> 00:00:38.430
pode ser grosseiramente identificada
pelos tiles que ela ativa.

00:00:38.464 --> 00:00:40.630
Se atribuirmos um pouco
a cada tile,

00:00:40.664 --> 00:00:43.366
podemos representar o nosso novo
estado discretizado

00:00:43.400 --> 00:00:47.093
como um bit vector,
com "1" para os tiles ativados

00:00:47.127 --> 00:00:48.662
e "0" para os outros
lugares.

00:00:48.696 --> 00:00:52.389
Isso por si só é uma representação
muito eficiente.

00:00:52.861 --> 00:00:55.638
Mas a genialidade está em como
o valor da função de estado

00:00:55.672 --> 00:00:57.558
é calculada
usando este esquema.

00:00:57.592 --> 00:00:59.622
Em vez de armazenar
um valor separado

00:00:59.656 --> 00:01:01.501
para cada estado "V" de "S",

00:01:01.535 --> 00:01:04.717
ele é definido de acordo
com o bit vector para este estado

00:01:04.751 --> 00:01:06.902
e de um peso para cada tile.

00:01:07.261 --> 00:01:12.030
O algoritmo Tile Coding
atualiza esses pesos iterativamente.

00:01:12.064 --> 00:01:15.021
Isso garante aos locais próximos
que tiles compartilhados

00:01:15.055 --> 00:01:18.405
também compartilham algum componente
de valor de estado,

00:01:18.439 --> 00:01:21.478
efetivamente suavizando
a função de valor apreendida.

00:01:21.939 --> 00:01:24.590
Mas Tile Coding
tem algumas desvantagens.

00:01:24.624 --> 00:01:26.749
Assim como uma simples abordagem
baseada em grades,

00:01:26.783 --> 00:01:29.277
temos que selecionar manualmente
o tamanhos dos tiles,

00:01:29.311 --> 00:01:33.197
os desvios, o número de tiles etc.
com antecedência.

00:01:33.997 --> 00:01:37.262
Uma abordagem mais flexível
é o Adaptive Tile Coding,

00:01:37.296 --> 00:01:39.509
que começa com tiles
bem grandes,

00:01:39.543 --> 00:01:43.261
e divide cada um deles em dois
sempre que apropriado.

00:01:43.725 --> 00:01:45.708
Como sabemos quando dividir?

00:01:45.742 --> 00:01:48.173
Podemos usar uma heurística
para isso.

00:01:48.207 --> 00:01:50.837
Basicamente queremos dividir
o espaço do estado

00:01:50.871 --> 00:01:53.717
quando percebermos que não
estamos mais aprendendo muito

00:01:53.751 --> 00:01:55.492
com a representação atual.

00:01:55.526 --> 00:01:58.437
Isto é, quando a nossa função
de valor não estiver mudando.

00:01:59.437 --> 00:02:02.901
Podemos parar quando atingirmos
um número elevado de divisões,

00:02:02.935 --> 00:02:04.861
ou iterações máximas.

00:02:04.895 --> 00:02:07.509
Para descobrir
qual tile dividir,

00:02:07.543 --> 00:02:12.445
temos que ver qual deve causar
o maior efeito na função de valor.

00:02:12.479 --> 00:02:15.364
Para isso, temos que monitorar
os subtiles

00:02:15.398 --> 00:02:17.285
e seus pesos projetados.

00:02:17.319 --> 00:02:20.517
Depois, podemos pegar o tile
com a maior diferença

00:02:20.551 --> 00:02:22.285
entre pesos de subtiles.

00:02:22.319 --> 00:02:24.693
Há várias outras heurísticas
que você pode usar,

00:02:24.727 --> 00:02:27.420
mas a maior vantagem
do Adaptive Tile Coding

00:02:27.454 --> 00:02:29.805
é que ele não depende
de um humano

00:02:29.839 --> 00:02:32.765
para especificar uma discretização
com antecedência.

00:02:32.799 --> 00:02:35.757
O espaço do estado resultante
é apropriadamente particionado

00:02:35.791 --> 00:02:37.390
de acordo
com sua complexidade.

